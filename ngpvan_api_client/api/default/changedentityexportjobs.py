from typing import Any, Dict, Optional, Union

import httpx

from ...client import Client
from ...models.changedentityexportjobs_json_body import ChangedentityexportjobsJsonBody
from ...models.changedentityexportjobs_response_201 import ChangedentityexportjobsResponse201
from ...models.changedentityexportjobs_response_400 import ChangedentityexportjobsResponse400
from ...types import Response


def _get_kwargs(
    *,
    client: Client,
    json_body: ChangedentityexportjobsJsonBody,
) -> Dict[str, Any]:
    url = "{}/changedEntityExportJobs".format(client.base_url)

    headers: Dict[str, str] = client.get_headers()
    cookies: Dict[str, Any] = client.get_cookies()

    json_json_body = json_body.to_dict()

    return {
        "method": "post",
        "url": url,
        "headers": headers,
        "cookies": cookies,
        "timeout": client.get_timeout(),
        "json": json_json_body,
    }


def _parse_response(
    *, response: httpx.Response
) -> Optional[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    if response.status_code == 201:
        response_201 = ChangedentityexportjobsResponse201.from_dict(response.json())

        return response_201
    if response.status_code == 400:
        response_400 = ChangedentityexportjobsResponse400.from_dict(response.json())

        return response_400
    return None


def _build_response(
    *, response: httpx.Response
) -> Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    return Response(
        status_code=response.status_code,
        content=response.content,
        headers=response.headers,
        parsed=_parse_response(response=response),
    )


def sync_detailed(
    *,
    client: Client,
    json_body: ChangedentityexportjobsJsonBody,
) -> Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    """/changedEntityExportJobs

     Create a new Changed Entity Export Job

    Use this endpoint to request a new Changed Entity Export Job for a specified `resourceType` with
    properties provided in the request body. The generated dataset will be one or multiple files that
    include all records which have changed between `dateChangedFrom` (specified by the user) and
    `dateChangedTo` (generated by the server at execution). Optionally, the user may also specify that
    inactive records be included in the export file with the `includeInactive` property. `ChangeTypes`
    began being stored in September 2020. Records for which the last change occurred before this date
    may be missing inaccurate `ChangeTypes` until they are updated. The user may also specify additional
    IDs with the `requestedIds` property to add to the dataset. The exported data will include all core
    fields for the resource type as well as any specified by the user with the `requestedFields` or
    `requestedCustomFieldIds` properties. If all generated content is less than the `fileSizeKbLimit`,
    then one file will be created. Otherwise, multiple files will be created such that none exceeds the
    specified limit.

    If the `dateChangedTo` parameter is in the past, the resulting records will be any which changed in
    the `dateChangedFrom` and `dateChangedTo` window. However, the records that will be returned by the
    job will *always be the current version of the records*. They will not be records at the snapshot
    moment in time of `dateChangedTo`.

    File download links expire after 20 days.

    Args:
        json_body (ChangedentityexportjobsJsonBody):

    Returns:
        Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]
    """

    kwargs = _get_kwargs(
        client=client,
        json_body=json_body,
    )

    response = httpx.request(
        verify=client.verify_ssl,
        **kwargs,
    )

    return _build_response(response=response)


def sync(
    *,
    client: Client,
    json_body: ChangedentityexportjobsJsonBody,
) -> Optional[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    """/changedEntityExportJobs

     Create a new Changed Entity Export Job

    Use this endpoint to request a new Changed Entity Export Job for a specified `resourceType` with
    properties provided in the request body. The generated dataset will be one or multiple files that
    include all records which have changed between `dateChangedFrom` (specified by the user) and
    `dateChangedTo` (generated by the server at execution). Optionally, the user may also specify that
    inactive records be included in the export file with the `includeInactive` property. `ChangeTypes`
    began being stored in September 2020. Records for which the last change occurred before this date
    may be missing inaccurate `ChangeTypes` until they are updated. The user may also specify additional
    IDs with the `requestedIds` property to add to the dataset. The exported data will include all core
    fields for the resource type as well as any specified by the user with the `requestedFields` or
    `requestedCustomFieldIds` properties. If all generated content is less than the `fileSizeKbLimit`,
    then one file will be created. Otherwise, multiple files will be created such that none exceeds the
    specified limit.

    If the `dateChangedTo` parameter is in the past, the resulting records will be any which changed in
    the `dateChangedFrom` and `dateChangedTo` window. However, the records that will be returned by the
    job will *always be the current version of the records*. They will not be records at the snapshot
    moment in time of `dateChangedTo`.

    File download links expire after 20 days.

    Args:
        json_body (ChangedentityexportjobsJsonBody):

    Returns:
        Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]
    """

    return sync_detailed(
        client=client,
        json_body=json_body,
    ).parsed


async def asyncio_detailed(
    *,
    client: Client,
    json_body: ChangedentityexportjobsJsonBody,
) -> Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    """/changedEntityExportJobs

     Create a new Changed Entity Export Job

    Use this endpoint to request a new Changed Entity Export Job for a specified `resourceType` with
    properties provided in the request body. The generated dataset will be one or multiple files that
    include all records which have changed between `dateChangedFrom` (specified by the user) and
    `dateChangedTo` (generated by the server at execution). Optionally, the user may also specify that
    inactive records be included in the export file with the `includeInactive` property. `ChangeTypes`
    began being stored in September 2020. Records for which the last change occurred before this date
    may be missing inaccurate `ChangeTypes` until they are updated. The user may also specify additional
    IDs with the `requestedIds` property to add to the dataset. The exported data will include all core
    fields for the resource type as well as any specified by the user with the `requestedFields` or
    `requestedCustomFieldIds` properties. If all generated content is less than the `fileSizeKbLimit`,
    then one file will be created. Otherwise, multiple files will be created such that none exceeds the
    specified limit.

    If the `dateChangedTo` parameter is in the past, the resulting records will be any which changed in
    the `dateChangedFrom` and `dateChangedTo` window. However, the records that will be returned by the
    job will *always be the current version of the records*. They will not be records at the snapshot
    moment in time of `dateChangedTo`.

    File download links expire after 20 days.

    Args:
        json_body (ChangedentityexportjobsJsonBody):

    Returns:
        Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]
    """

    kwargs = _get_kwargs(
        client=client,
        json_body=json_body,
    )

    async with httpx.AsyncClient(verify=client.verify_ssl) as _client:
        response = await _client.request(**kwargs)

    return _build_response(response=response)


async def asyncio(
    *,
    client: Client,
    json_body: ChangedentityexportjobsJsonBody,
) -> Optional[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]:
    """/changedEntityExportJobs

     Create a new Changed Entity Export Job

    Use this endpoint to request a new Changed Entity Export Job for a specified `resourceType` with
    properties provided in the request body. The generated dataset will be one or multiple files that
    include all records which have changed between `dateChangedFrom` (specified by the user) and
    `dateChangedTo` (generated by the server at execution). Optionally, the user may also specify that
    inactive records be included in the export file with the `includeInactive` property. `ChangeTypes`
    began being stored in September 2020. Records for which the last change occurred before this date
    may be missing inaccurate `ChangeTypes` until they are updated. The user may also specify additional
    IDs with the `requestedIds` property to add to the dataset. The exported data will include all core
    fields for the resource type as well as any specified by the user with the `requestedFields` or
    `requestedCustomFieldIds` properties. If all generated content is less than the `fileSizeKbLimit`,
    then one file will be created. Otherwise, multiple files will be created such that none exceeds the
    specified limit.

    If the `dateChangedTo` parameter is in the past, the resulting records will be any which changed in
    the `dateChangedFrom` and `dateChangedTo` window. However, the records that will be returned by the
    job will *always be the current version of the records*. They will not be records at the snapshot
    moment in time of `dateChangedTo`.

    File download links expire after 20 days.

    Args:
        json_body (ChangedentityexportjobsJsonBody):

    Returns:
        Response[Union[ChangedentityexportjobsResponse201, ChangedentityexportjobsResponse400]]
    """

    return (
        await asyncio_detailed(
            client=client,
            json_body=json_body,
        )
    ).parsed
