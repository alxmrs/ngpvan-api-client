from typing import Any, Dict, List, Type, TypeVar, Union

import attr

from ..types import UNSET, Unset

T = TypeVar("T", bound="FinancialbatchesResponse200ItemsItem")


@attr.s(auto_attribs=True)
class FinancialbatchesResponse200ItemsItem:
    """
    Attributes:
        financial_batch_id (Union[Unset, int]):  Example: 825.
        financial_batch_number (Union[Unset, int]):  Example: 8675308.
        financial_batch_name (Union[Unset, str]):  Example: Example Batch.
        designation_id (Union[Unset, int]):  Example: 122.
        expected_contribution_count (Union[Unset, int]):  Example: 10.
        expected_contribution_total_amount (Union[Unset, int]):  Example: 500.
        bank_account_id (Union[Unset, Any]):
        date_deposited (Union[Unset, Any]):
        deposit_number (Union[Unset, Any]):
        check_date (Union[Unset, Any]):
        check_number (Union[Unset, Any]):
        is_open (Union[Unset, bool]):  Default: True. Example: True.
        date_opened (Union[Unset, str]):  Example: 2019-08-01T10:00:00Z.
        date_closed (Union[Unset, Any]):
        is_auto_generated (Union[Unset, bool]):  Default: True.
    """

    financial_batch_id: Union[Unset, int] = 0
    financial_batch_number: Union[Unset, int] = 0
    financial_batch_name: Union[Unset, str] = UNSET
    designation_id: Union[Unset, int] = 0
    expected_contribution_count: Union[Unset, int] = 0
    expected_contribution_total_amount: Union[Unset, int] = 0
    bank_account_id: Union[Unset, Any] = UNSET
    date_deposited: Union[Unset, Any] = UNSET
    deposit_number: Union[Unset, Any] = UNSET
    check_date: Union[Unset, Any] = UNSET
    check_number: Union[Unset, Any] = UNSET
    is_open: Union[Unset, bool] = True
    date_opened: Union[Unset, str] = UNSET
    date_closed: Union[Unset, Any] = UNSET
    is_auto_generated: Union[Unset, bool] = True
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        financial_batch_id = self.financial_batch_id
        financial_batch_number = self.financial_batch_number
        financial_batch_name = self.financial_batch_name
        designation_id = self.designation_id
        expected_contribution_count = self.expected_contribution_count
        expected_contribution_total_amount = self.expected_contribution_total_amount
        bank_account_id = self.bank_account_id
        date_deposited = self.date_deposited
        deposit_number = self.deposit_number
        check_date = self.check_date
        check_number = self.check_number
        is_open = self.is_open
        date_opened = self.date_opened
        date_closed = self.date_closed
        is_auto_generated = self.is_auto_generated

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if financial_batch_id is not UNSET:
            field_dict["financialBatchId"] = financial_batch_id
        if financial_batch_number is not UNSET:
            field_dict["financialBatchNumber"] = financial_batch_number
        if financial_batch_name is not UNSET:
            field_dict["financialBatchName"] = financial_batch_name
        if designation_id is not UNSET:
            field_dict["designationId"] = designation_id
        if expected_contribution_count is not UNSET:
            field_dict["expectedContributionCount"] = expected_contribution_count
        if expected_contribution_total_amount is not UNSET:
            field_dict["expectedContributionTotalAmount"] = expected_contribution_total_amount
        if bank_account_id is not UNSET:
            field_dict["bankAccountId"] = bank_account_id
        if date_deposited is not UNSET:
            field_dict["dateDeposited"] = date_deposited
        if deposit_number is not UNSET:
            field_dict["depositNumber"] = deposit_number
        if check_date is not UNSET:
            field_dict["checkDate"] = check_date
        if check_number is not UNSET:
            field_dict["checkNumber"] = check_number
        if is_open is not UNSET:
            field_dict["isOpen"] = is_open
        if date_opened is not UNSET:
            field_dict["dateOpened"] = date_opened
        if date_closed is not UNSET:
            field_dict["dateClosed"] = date_closed
        if is_auto_generated is not UNSET:
            field_dict["isAutoGenerated"] = is_auto_generated

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        financial_batch_id = d.pop("financialBatchId", UNSET)

        financial_batch_number = d.pop("financialBatchNumber", UNSET)

        financial_batch_name = d.pop("financialBatchName", UNSET)

        designation_id = d.pop("designationId", UNSET)

        expected_contribution_count = d.pop("expectedContributionCount", UNSET)

        expected_contribution_total_amount = d.pop("expectedContributionTotalAmount", UNSET)

        bank_account_id = d.pop("bankAccountId", UNSET)

        date_deposited = d.pop("dateDeposited", UNSET)

        deposit_number = d.pop("depositNumber", UNSET)

        check_date = d.pop("checkDate", UNSET)

        check_number = d.pop("checkNumber", UNSET)

        is_open = d.pop("isOpen", UNSET)

        date_opened = d.pop("dateOpened", UNSET)

        date_closed = d.pop("dateClosed", UNSET)

        is_auto_generated = d.pop("isAutoGenerated", UNSET)

        financialbatches_response_200_items_item = cls(
            financial_batch_id=financial_batch_id,
            financial_batch_number=financial_batch_number,
            financial_batch_name=financial_batch_name,
            designation_id=designation_id,
            expected_contribution_count=expected_contribution_count,
            expected_contribution_total_amount=expected_contribution_total_amount,
            bank_account_id=bank_account_id,
            date_deposited=date_deposited,
            deposit_number=deposit_number,
            check_date=check_date,
            check_number=check_number,
            is_open=is_open,
            date_opened=date_opened,
            date_closed=date_closed,
            is_auto_generated=is_auto_generated,
        )

        financialbatches_response_200_items_item.additional_properties = d
        return financialbatches_response_200_items_item

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
